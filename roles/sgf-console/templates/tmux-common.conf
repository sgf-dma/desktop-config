
set-option -g       prefix {{ tmux_prefix }}

set-option -g       repeat-time 200
set-option -g       display-time 2500

# taskwarrior colors works even with TERM=screen. The only requirment is
# TERM=xterm-256color in xterm, where i launch tmux. So for now leave this
# commented.
set-option -g          default-terminal "screen.xterm-new"


### Colors.
## My colors.
##set-option -g       status-bg white
##set-option -g       message-bg white
##set-option -g       message-command-bg white
##set-option -g       pane-active-border-fg cyan
##set-option -g       pane-border-fg magenta
##set-option -g       display-panes-active-colour cyan
##set-option -g       display-panes-colour magenta
##set-option -g -w    mode-bg white

### default statusbar colors
##set-option -g status-bg black #base02
##set-option -g status-fg yellow #yellow
##set-option -g status-attr default
##
### default window title colors
##set-window-option -g window-status-fg brightblue #base0
##set-window-option -g window-status-bg default
###set-window-option -g window-status-attr dim
##
### active window title colors
##set-window-option -g window-status-current-fg brightred #orange
##set-window-option -g window-status-current-bg default
###set-window-option -g window-status-current-attr bright
##
### pane border
##set-option -g pane-border-fg black #base02
##set-option -g pane-active-border-fg brightgreen #base01
##
### message text
##set-option -g message-bg black #base02
##set-option -g message-fg brightred #orange

### pane number display
##set-option -g display-panes-active-colour blue #blue
##set-option -g display-panes-colour brightred #orange
##
### clock
##set-window-option -g clock-mode-colour green #green

# Send prefix key directly.
bind-key            {{ tmux_prefix_key }} send-keys {{ tmux_prefix }}

### Sessions, windows and panes (xmonad style).
# Create and delete.
set-option -g       renumber-windows on
bind-key            N       new-session
bind-key            n       new-window -c '#{pane_current_path}'
bind-key -r         s       split-window -v -c '#{pane_current_path}'
bind-key -r         v       split-window -h -c '#{pane_current_path}'
bind-key            q       respawn-pane
# Kill current session, and select next one.
# Command from Chris Johnsen's answer at unix.stackexchange "Kill a tmux
# session and select another tmux session" (http://unix.stackexchange.com/questions/58588/kill-a-tmux-session-and-select-another-tmux-session)
# This hack relies on fact, that "default" client (for `switch-client -n`) and
# "default" session (for #S in `display-message -p`) are last active ones. If
# during execution of this shell command, any other tmux client will receive
# _any_ input, it'll become "default" and command will fail. Though, this
# command should run from shell, because after killing current session from
# inside tmux, no other commands may be executed (client detached). If i
# switch first, i have no way to determine the name of previous session (i
# think).
# Note, that i execute `switch-client` and `kill-session` in different _shell_
# commands, because otherwise, if this is the last session and `switch-client`
# failes, `kill-session` will not be executed at all.
bind-key            C       confirm-before -p "kill-session #S? (y/n)" \
                                'run-shell \
                                    "s=\"\$(tmux display-message -p \"#S\")\"; \
                                     tmux switch-client -n; \
                                     tmux kill-session -t \"\$s\""'
bind-key            c       confirm-before -p "kill-window #W? (y/n)" kill-window
bind-key            x       confirm-before -p "kill-pane #P? (y/n)" kill-pane

# Select sessions.
#bind-key            A       command-prompt "attach-session -t '%%'"
bind-key            d       detach-client
bind-key -r         t       switch-client -n
bind-key -r         T       switch-client -p

set -g mouse on

# Select windows (xmonad style).
set-option -g       base-index 1
bind-key -r         l       next-window
bind-key -r         h       previous-window
# FIXME: Unused below.
#bind-key            b       command-prompt "select-window -t ':%%'"
bind-key            '!'     select-window -t :1
bind-key            '@'     select-window -t :2
bind-key            '#'     select-window -t :3
bind-key            '$'     select-window -t :4
bind-key            '%'     select-window -t :5
bind-key            '^'     select-window -t :6
bind-key            '&'     select-window -t :7
bind-key            '*'     select-window -t :8
bind-key            '('     select-window -t :9

# Select panes (xmonad style).
set-option -g       pane-base-index 1
bind-key            /       display-panes
bind-key -r         j       select-pane -t .+
bind-key -r         k       select-pane -t .-
bind-key            1       select-pane -t .1
bind-key            2       select-pane -t .2
bind-key            3       select-pane -t .3
bind-key            4       select-pane -t .4
bind-key            5       select-pane -t .5
bind-key            6       select-pane -t .6
bind-key            7       select-pane -t .7
bind-key            8       select-pane -t .8
bind-key            9       select-pane -t .9

# Move windows and panes (xmonad style).
bind-key -r         L       swap-window -t '+1'
bind-key -r         H       swap-window -t '-1'
bind-key -r         Space   next-layout
bind-key -r         K       swap-pane -U
bind-key -r         J       swap-pane -D

# Resize panes (vim style).
bind-key -r         +       resize-pane -U
bind-key -r         -       resize-pane -D
bind-key -r         >       resize-pane -R
bind-key -r         <       resize-pane -L

# Rename.
bind-key            r       command-prompt -I '#W' "rename-window '%%'"
bind-key            R       command-prompt -I '#S' "rename-session '%%'"


### Copy-paste.
set-option -g       history-limit 10000
set-option -g -w    mode-keys vi
set-option -s       buffer-limit 16

{% if ansible_distribution == "Debian"
        and ansible_distribution_major_version | int > 9 %}
bind-key -T copy-mode-vi v send -X begin-selection
bind-key -T copy-mode-vi y send -X copy-selection
{% else %}
bind-key -t vi-copy v       begin-selection
bind-key -t vi-copy y       copy-selection
{% endif %}

# The meaning (from tmux buffers point of view) of copying from copy-mode and
# pasting from X selection is the same, and the meaning of pasting from tmux
# buffer and copying to X selection is also the same. Really, copying from
# copy-mode either rotates stack and places new content on top or replaces one
# of existing buffers. Pasting from X selection does the same to tmux buffers,
# so it should have the same controls avaiable - paste and rotate (like select
# and copy from copy-mode) or paste to specified buffer (like select and copy
# with "repeat count" from copy-mode). Similarly, pasting from tmux buffer has
# two controls - paste top level buffer or choose buffer to paste and move it
# on top of stack (with stack rotation); thus, copy to X clipboard should also
# have these two options. The equivalence of this operations may be observed
# in this way: copying from copy-mode is "put in tmux buffer", and copying
# from X selection is also "put in tmux buffer"; the same - paste from tmux
# buffer is "get from tmux buffer", and copy to X selection is also "get from
# tmux buffer".
bind-key            p       paste-buffer
bind-key            P       command-prompt "paste-buffer -b %%"
# Loading a named buffer raises it on top of buffer stack. Thus, i may just
# save/load choosed buffer to raise it on top of stack. But `choose-buffer`
# expands only first occurence of `%%` with choosed buffer name, so i need to
# use shell variable.
bind-key            b       choose-buffer 'run-shell \
                              "b=%%; tmux save-buffer -b \$b - | tmux load-buffer -b \$b -; \
                               tmux paste-buffer"'

# All commands with `xclip` must run in the background (`run-shell b` for tmux
# versions, which support '-b' option), because `xclip` does not exit, when it
# have read stdin, - it'll wait for X selection requests until other X
# application places its data in that selection.
bind-key            C-c     run-shell -b \
                              'tmux save-buffer - | xclip -i -selection primary'
bind-key            B       choose-buffer 'run-shell -b \
                              "b=%%; tmux save-buffer -b \$b - | tmux load-buffer -b \$b -; \
                               tmux save-buffer - | xclip -i -selection primary"'
bind-key            C-v     run-shell -b \
                              'xclip -o -selection primary | tmux load-buffer -; \
                               tmux paste-buffer'
bind-key            V       command-prompt -p "(to-buffer) " 'run-shell -b \
                              "xclip -o -selection primary | tmux load-buffer -b %1 -; \
                               tmux paste-buffer -b %1"'


### Miscellaneous.
bind-key            C-l     refresh-client
bind-key            C-w     clear-history
bind-key            o       command-prompt -I "$PWD/var/" "source-file '%%'"


### For use on systems without ssh-agent and with tmux-at script.
# Exclude SSH_AGENT_PID and SSH_AUTH_SOCK from variable rewritten during new
# session/window creation. Thus, i can run ssh-agent, when tmux server starts,
# and use it in all subsequent X sessions. Default 'update-environment' is:
#set-option -g          update-environment "DISPLAY XAUTHORITY WINDOWID SSH_ASKPASS SSH_CONNECTION SSH_AGENT_PID SSH_AUTH_SOCK"
# thus, without ssh-agent it'll be:
set-option -g           update-environment "DISPLAY XAUTHORITY WINDOWID SSH_ASKPASS SSH_CONNECTION DBUS_SESSION_BUS_ADDRESS"

# Plugins.
set -g @plugin 'tmux-plugins/tpm'

{% if colors.tmux != 'disabled' %}
set -g @plugin 'seebi/tmux-colors-solarized'

{% if colors.xterm == 'disabled' %}

{% if colors.tmux == 'solarized-dark' %}
{#- Solarized `dark` is incorrect without proper terminal colors. So, because
local config fixes can not overwrite options set in plugins (because `tpm`
runs the last), i fall back here to working `256` color scheme. But if i still
want to use broken solarized dark, i may add it as another color config to
`tmux-colors-solarized` plugin.
-#}
set -g @colors-solarized '256'
{% else %}
set -g @colors-solarized '{{ colors.tmux | replace ('solarized-', '', 1) }}'
{% endif %}

{% elif colors.tmux.startswith('solarized-') %}

{#- Tmux solarized colors change their meaning, when terminal _also_ uses
solarized colorscheme: `dark` now means use solarized colorscheme _matching_
with terminal, and `light` means use solarized colorscheme _inverse_ to your
terminal. -#}
{% if colors.tmux == colors.xterm %}
set -g @colors-solarized 'dark'
{% else %}
set -g @colors-solarized 'light'
{% endif %}

{% else %}

{#- Not a solarized color? -#}
set -g @colors-solarized '{{ colors.tmux }}'
{% endif %}

{% endif %}
