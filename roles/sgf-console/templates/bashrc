prependPATH() {
    # See https://unix.stackexchange.com/questions/14895/duplicate-entries-in-path-a-problem .
    case ":$PATH:" in
      *":$1:"*) :;; # already there
      *) PATH="${1:+$1:}$PATH";; # or PATH="$PATH:$new_entry"
    esac
}

__prompt_command() {
    # Save exit code of previous command.
    local r="$?"

    # Color codes are listed after '\033[' and separated by semicolon. Color
    # mode specification ends at 'm'. Then, to all following text specified
    # color mode will be applied until '\033[00m' will be encountered. Below,
    # first color code specifies text style (bold, underlined, etc) and then
    # color itself is specified.
    #
    # See the full table at
    # https://stackoverflow.com/questions/4842424/list-of-ansi-color-escape-sequences .
    #
    # \[ and \] are not part of a color specification, but special prompt
    # escapes used for telling bash the exact start and end of non-printable
    # character sequence. These are needed for bash to be able to calculate
    # prompt length properly.
    local Red='\[\033[00;31m\]'
    local Green='\[\033[00;32m\]'
    local Yellow='\[\033[00;33m\]'
    local BBlue='\[\033[01;34m\]'
    local Purple='\[\033[00;35m\]'

    local End='\[\033[00m\]'

    local head="\${debian_chroot:+(\$debian_chroot)}"
    local user="${Green}\u${End}"
    local host="${BBlue}\h${End}"
    local dir="${Purple}\w${End}"
    local rcode=''

    # __git_ps1() in PROMPT_COMMAND mode requires to parts of PS1 - before and
    # after git information - to be passed as arguments.
    local PS1_pre=''
    local PS1_post=''

    if [ $r != 0 ]; then
        r_s="$(( $r - 128 ))"
        if [ $r_s -gt 0 ]; then
            case $r_s in
                1  ) r_signal="HUP" ;;
                2  ) r_signal="INT" ;;
                3  ) r_signal="QUIT" ;;
                4  ) r_signal="ILL" ;;
                5  ) r_signal="TRAP" ;;
                6  ) r_signal="ABRT" ;;
                7  ) r_signal="BUS" ;;
                8  ) r_signal="FPE" ;;
                9  ) r_signal="KILL" ;;
                10 ) r_signal="USR1" ;;
                11 ) r_signal="SEGV" ;;
                12 ) r_signal="USR2" ;;
                13 ) r_signal="PIPE" ;;
                14 ) r_signal="ALRM" ;;
                15 ) r_signal="TERM" ;;
                16 ) r_signal="STKFLT" ;;
                17 ) r_signal="CHLD" ;;
                18 ) r_signal="CONT" ;;
                19 ) r_signal="STOP" ;;
                20 ) r_signal="TSTP" ;;
                21 ) r_signal="TTIN" ;;
                22 ) r_signal="TTOU" ;;
                23 ) r_signal="URG" ;;
                24 ) r_signal="XCPU" ;;
                25 ) r_signal="XFSZ" ;;
                26 ) r_signal="VTALRM" ;;
                27 ) r_signal="PROF" ;;
                28 ) r_signal="WINCH" ;;
                29 ) r_signal="IO" ;;
                30 ) r_signal="PWR" ;;
                *  ) r_signal='' ;;
            esac
        else
            r_signal=''
        fi
        rcode="${Red} $r${r_signal:+($r_signal)}${End}"
    fi
    PS1=""

    PS1_pre="$head${user}@${host}:${dir}"
    PS1_post="${rcode}\\\$ "
    __git_ps1 "$PS1_pre" "$PS1_post"
}

export LANG=en_US.utf8
export LC_CTYPE=ru_RU.utf8
export LC_COLLATE=ru_RU.utf8
prependPATH "$HOME/bin"
umask 027

export MANPATH="$HOME/.local/share/man:"
eval $(thefuck --alias)
eval $(thefuck --alias FUCK)
{% if install_keychain | bool %}
{% if gpg_keys | length == 0 %}
eval $(keychain --agents ssh --eval {{ ssh_keys | join(' ') }} )
{% else %}
eval $(keychain --gpg2 --agents ssh,gpg --eval {{ (ssh_keys + gpg_keys) | join(' ') }} )
{% endif %}
{% endif %}

export GIT_PS1_SHOWDIRTYSTATE='yes'
export GIT_PS1_SHOWUNTRACKEDFILES='yes'
export GIT_PS1_SHOWUPSTREAM='auto'
export GIT_PS1_SHOWCOLORHINTS='yes'
export PROMPT_DIRTRIM=3

PROMPT_COMMAND='__prompt_command'

{% if obtain_cowpowers %}
# What cow should say. If called with one argument, and file with such name
# exists, this file will be initialized as phrases file. Then (if some phrase
# file had been initialized) call _without_ arguments tells the cow to read
# next phrase block from this file.

# Phrase block (to read at once) may be written on several lines and must be
# separated from following block (to read another time) by exactly one empty
# line.  Sequential empty lines are not supported and will be treated as end
# of file.
#
# If called with more, than one argument, or with one argument, which is not
# an existing file, cow just says so.
say() {
    # File, where to store state.
    local cow_state_file="{{ cow_msg_statefile }}"
    # File with phrases to speak.
    local msg_file=''
    # Line in phrases file, from where to start.
    local msg_line=''
    # Length of current phrase.
    local msg_len=''
    # Line, where next phrase starts.
    local msg_next_line=''
    # What to say.
    local cow_says=''

    if [ $# -eq 0 ]; then
        if [ ! -f "$cow_state_file" ]; then
            echo "Cow file is not initialized."
            return 1
        fi
        msg_file="$(sed -E -ne'0,/^file=/s/^file=(.*)/\1/p' "$cow_state_file")"
        msg_line="$(sed -E -ne'0,/^line=/s/^line=(.*)/\1/p' "$cow_state_file")"
        cow_says="$(sed -ne "$msg_line,/^$/p" "$msg_file")"
        msg_len="$( echo "$cow_says" | wc -l)"
        msg_next_line=$(( $msg_line + $msg_len))
        if [ "x$cow_says" != 'x' ]; then
            cowsay "$cow_says" | lolcat
        else
            echo "End of cow file reached."
            return 1
        fi
        cat > "$cow_state_file" <<EOF
file=$msg_file
line=$msg_next_line
EOF
    elif [ $# -eq 1 -a -f "$1" ]; then
        msg_file="$(readlink -e "$1")"
        cat >"$cow_state_file" <<EOF
file=$msg_file
line=1
EOF
        echo "Initialized cow to read from '$msg_file'"
    else
        cowsay "$@" | lolcat
    fi
}

sayHi() {
    cowsay -w "${@:- {{- default_cowHi -}} }" | lolcat -a
}

sayBye() {
    neo-cowsay --super "${@:- {{- default_cowBye -}} }"
}
{% endif %}
