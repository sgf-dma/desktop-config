---

tmux_enable: true
tmux_prefix: 'C-b'
tmux_prefix_key: "{{ tmux_prefix }}"

vim_enable: true
vim_plugins:
  - repo: 'https://github.com/altercation/vim-colors-solarized.git'
  - repo: 'https://github.com/tpope/vim-fugitive.git'
  - repo: 'https://github.com/plasticboy/vim-markdown.git'
  - repo: 'https://github.com/tpope/vim-sensible.git'
  - repo: 'https://github.com/dhruvasagar/vim-table-mode.git'

vim_disable_arrow_keys: true

# Whether to install keychain or not.
install_keychain: true
# Repository, where to clone keychain.
keychain_repo_dir: "{{ user_dist_dir + '/keychain' }}"
# Branch to use.
keychain_branch: 'master'

# List of ssh keys to load into keychain.
ssh_keys:
  - 'id_rsa'

# List of gpg keys to load into keychain.
#
# Note, that if this list left empty, keychain will _not_ manage `gpg-agent`.
# Moreover, GPG versions 2.1 and later do not need (ignore, in fact)
# GPG_AGENT_INFO environment variable at all (which keychain tries to set).
# Thus, on recent enough gpg it may be better to leave this list empty.
gpg_keys: []

# gpg-agent's `default-cache-ttl` option.
gpg_cache_ttl: 600
# gpg-agent's `max-cache-ttl` option.
gpg_max_cache_ttl: 7200

# Force the use of console pinentry program.
#
# Note, that GUI pinentry program `/usr/bin/pinentry-gnome3` may cache key
# encryption _password_ (not key itself) in gnome keyring, if corresponding
# checkbox was checked in password asking dialog. If that happens, all further
# requests to pinentry will _not even spawn a dialog box_: password will be
# just taken from gnome keyring and used to decrypt gpg keys (effectively
# making `gpg-agent`'s own cache ttl-s useless, because the key will be indeed
# removed from gpg-agent's cache after ttl expires, but the password will
# _remain_ unlocked in gnome keyring).
#
# Though, by specifying 'no-allow-external-cache' option in gpg-agent.conf i
# tell pinentry-gnome3 to not cache password.
#
# Using console-based pinentry avoids gnome keyring completely. But in that
# case 'passff' firefox plugin will not be able to spawn pinentry to ask for
# unlocking gpg key.
gpg_console_pinentry: false

# Set gpg pinentry path directly. To use default (see above), leave it empty.
gpg_pinentry: ''

# Whether to install fuck ('false' - "do fuck with me" - means install).
dont_fuck_with_me: false
thefuck_repo_dir: "{{ user_dist_dir + '/thefuck' }}"
thefuck_branch: 'master'

pass_repo_dir: "{{ user_dist_dir + '/password-store' }}"
pass_branch: 'master'

# Overwrite files normally left untoched. Set this only _once_ for overwriting
# previous possible incorrect configuration, because setting this permanently
# will result in _always changed_ status of playbook run.
force_overwrite: no

# This dictionary is used by several roles (e.g. `sgf-console` and
# `sgf-desktop`). This role initializes only part of its keys from
# `console_colors` dictionary. To overwrite particular keys, set them in
# parent task.
colors: {}

# Default for _all_ `colors` dictionary keys (overwriting role default value).
# But particular `colors` key set explicitly in parent task will overwrite
# this value. This variable used by several roles (e.g. `sgf-console` and
# `sgf-desktop`).
# all_colors: 'disabled'

# Directory, where to unpack programs (which can't be properly installed into
# ~/.local).
user_opt_dir: "{{ ansible_user_dir + '/opt' }}"

# Directory, where to download and save locally installed programs and files.
user_dist_dir: "{{ user_opt_dir + '/dist' }}"

# Directory, where to install user's programs.
user_local_path: "{{ ansible_user_dir + '/.local' }}"
