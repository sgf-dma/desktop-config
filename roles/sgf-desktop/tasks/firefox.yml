---

- name: firefox | Install OS package
  apt:
    name: 'firefox-esr'
    state: present
  become: yes
  when: ansible_facts.packages['firefox-esr'] is not defined

- block:
    # If 'url' is defined by user, i don't use 'version' and 'lang' fields
    # (they're ignored), but require 'name' to be defined instead. If 'url' is
    # _not_ defined by user, 'name' field is ignored, but 'version' is
    # required ('lang' is used, but optional due to default).
    #
    # I need to use both 'version' and 'lang' in 'archive' and 'dir' (install
    # (unpack) directory) names in order to make language or version change to
    # cause re-download and re-unpack (if archive is already present).
    #
    # In case of 'name' (when 'url' is defined explicitly), i just use 'name'
    # (in place of 'version'). (Thus, changing 'url' does _not_ cause
    # re-download and re-unpack).
    #
    # In 'profile' name only 'version' or 'name' is sufficient (different
    # languages should work on the same profile, but different firefox
    # versions may not; for the second case - i don't care, if user've changed
    # 'url' to something incompatible without changing the 'name').
    #
    # Firefox 'desktop' file name also contain 'version' or 'name' only (i may
    # install several firefox versions simultaneously, but each version may be
    # of one language only).
    - name: firefox | Define firefox versions
      set_fact:
        firefox_versions: >-
          {{ firefox_versions + 
              [ def_item | combine(item,
                      { 'id'      : item_id
                      , 'lang'    : item_lang
                      , 'archive' : item_id + '.tar.bz2'
                      , 'dir'     : item_dir
                      , 'bin'     : item_dir + '/firefox/firefox'
                      , 'desktop' : 'firefox-' + item_id_v + '.desktop'
                      }
                    )
              ]
          }}
      vars:
        item_lang : "{{ item.lang | default('en-US') | replace('_', '-') }}"
        item_id_v : >-
          {{  item.version if item.url is not defined
              else item.name
          }}
        item_id   : >-
          {{ ('firefox-' + item_id_v + '.' +  item_lang)
                if item.url is not defined
              else
                item.url | basename| regex_replace('.tar.bz2$', '') + '.' + item.name
          }}
        item_dir  : "{{ user_opt_dir + '/' + item_id }}"
        def_item  : >-
          {{ (  { 'url': item.url
                , 'comment': 'Firefox ' + item.name
                } if item.url is defined
                else
                  firefox_latest | combine(
                    { 'url': firefox_latest.url + '&lang=' + item_lang
                    })
                  if item.version == 'latest'
                else
                  firefox_by_ver | combine(
                    { 'url'     : firefox_by_ver.url + '/'
                                    + item.version + '/linux-x86_64/'
                                    + item_lang + '/'
                                    + 'firefox-' + item.version + '.tar.bz2'
                    , 'comment' : firefox_by_ver.comment + item.version
                    })
                  if item.version is defined
             ) | combine(
                  { 'profile' : 'default-' + item_id_v
                  })
          }}
      loop: "{{ firefox2 }}"

    - name: huy
      debug:
        var: firefox_versions
  tags:
    - firefox_install
    - firefox_debug

- block:
    - name: firefox | Stat system .desktop files
      stat:
        path: "{{ system_desktop_entries + '/' + item }}"
      loop: "{{ firefox_desktop_names }}"
      register: system_firefox_desktop_files_stats
    - name: firefox | Stat user .desktop files
      stat:
        path: "{{ user_desktop_entries + '/' + item }}"
      loop: "{{ firefox_desktop_names }}"
      register: user_firefox_desktop_files_stats
    - name: firefox | Define desktop files
      set_fact:
        firefox_desktop_files: >
          {{ firefox_desktop_files +
              [ { 'name': item.0.item
                , 'sys_path'    : item.0.stat.exists | ternary(item.0.stat.path, '')
                , 'sys_exists'  : item.0.stat.exists
                , 'user_path'   : item.1.stat.exists
                    | ternary(item.1.stat.path, user_desktop_entries + '/' + item.1.item)
                , 'user_exists' : item.1.stat.exists
                }
              ]
          }}
      loop: >
        {{ system_firefox_desktop_files_stats.results
            | zip(user_firefox_desktop_files_stats.results)
            | list
        }}
    - name: firefox | Show .desktop files
      debug:
        var: firefox_desktop_files
  tags:
    - 'load'
    - 'firefox_profile_hardcode'

# FIXME: Use `desktop-file-install` for installing desktop files?
- block:
    - name: firefox | Install desktop file utils
      apt:
        name: 'desktop-file-utils'
        state: present
      become: yes
      when: ansible_facts.packages['desktop-file-utils'] is not defined
    - name: firefox | Create directory for user .desktop entries
      file:
        path:   "{{ user_desktop_entries }}"
        mode:   0755
        state:  directory
    - name: firefox | Copy system .desktop files
      copy:
        src:    "{{ item.sys_path }}"
        dest:   "{{ item.user_path }}"
        mode:   0644
        force:  "{{ force_overwrite }}"
        backup: yes
        remote_src: yes
      when: item.sys_exists
      loop: "{{ firefox_desktop_files }}"
    # Hardcode profile name into _all_ found .desktop entries.
    # Because `backrefs` is used in this task, if regexp does not match, file
    # will be left unmodified.
    - name: firefox | Hardcode profile name in .desktop files
      lineinfile:
        dest:   "{{ item.user_path }}"
        backup: "{{ item.user_exists }}"
        #          {{ not firefox_default_copied.results
        #              | selectattr('item.item', 'equalto', item.item)
        #              | map(attribute='changed') | first
        #          }}
        line: >
          {{ 'Exec=\2 ' + cur_firefox_exec_opts }}
        regexp: "(^#+|^)Exec=([^ ]+).*"
        backrefs: yes
        state:  present
      vars:
        cur_firefox: >-
          {{ { 'profile': firefox_system_profile } }}
      register: firefox_desktop_changed
      when: item.sys_exists or item.user_exists
      loop: "{{ firefox_desktop_files }}"
      # I probably, shouldn't disable any .desktop entries. It's better to
      # hardcode profile name to all of them.
  #    - name: firefox | Hide iceweasel .desktop entry
  #      lineinfile:
  #        dest:   "{{ user_desktop_entries + '/iceweasel.desktop' }}"
  #        backup: >-
  #          {{ not firefox_default_copied.results
  #              | selectattr('item', 'equalto', 'iceweasel.desktop')
  #              | map(attribute='changed') | first
  #          }}
  #        line:   'NoDisplay=true'
  #        regexp: "(^#+|^)NoDisplay="
  #        state:  present
  tags:
    - 'firefox_profile_hardcode'

# Note:
# -`force_overwrite` will trigger changed status of profile hardcoding
# task (above) and, thus, will trigger this task too.
# - i assume, that hardcoding is run for all desktop files copied to local
# user directory, thus it's enough to check hardcoding task changed
# status.
- name: firefox | Update user's mime info cache
  command: update-desktop-database "{{ user_desktop_entries }}"
  when: >-
    force_overwrite
    or (  firefox_desktop_changed is defined
          and firefox_desktop_changed.results
                | selectattr('changed', 'equalto', true) | list
                | length > 0
       )
  tags:
    - 'firefox_profile_hardcode'
    - 'firefox_set_default'
    - 'firefox_mime'

# Now, because i hardcode profile names for system and 52 ESR firefox
# launches, i shouldn't notice any difference between auto-starting with last
# profile or not. But in case i run some other firefox version without
# hardcoded profile name to avoid breaking last used profile i may still want
# to disable auto-start.
- block:
    - name: firefox | Create profile directory
      file:
        path: "{{ firefox_profile_dir }}"
        mode:   0755
        state: 'directory'
    - name: firefox | Create empty profiles.ini, if it doesn't exist
      copy:
        src:  "{{ 'files/firefox/' + firefox_profiles_ini | basename }}"
        dest: "{{ firefox_profiles_ini }}"
        force: no
    - name: firefox | Disable profile auto start for now
      lineinfile:
        dest:   "{{ firefox_profiles_ini }}"
        backup: yes
        line:   'StartWithLastProfile=0'
        regexp: "(^#+|^)StartWithLastProfile="
        state:  present
  tags:
    - 'firefox_profile_noauto'

- name: Install specific firefox versions
  include_tasks:
    file: firefox_versions.yml
    apply:
      tags:
        - 'firefox_install'
  loop: "{{ firefox_versions }}"
  loop_control:
    loop_var: 'cur_firefox'
  tags:
    - 'firefox_install'

- block:
    - name: firefox | Install mime utils
      package:
        name: "{{ pkgs_mime }}"
        state: present
      become: yes
      when: >-
        pkgs_mime | intersect(ansible_facts.packages.keys()) != pkgs_mime
    - name: firefox | Create mimeapps.list file, if it doesn't exist
      template:
        force: "{{ force_overwrite }}"
        backup: yes
        src: 'firefox/mimeapps.list'
        dest: "{{ item }}"
        mode: 0755
      loop: "{{ mimeapps_list_files }}"
    # There're two sections in `mimeapps.list` file: `Default Applications`
    # and `Added Associations`. And `gvfs-mime` during setting default
    # application also adds application to the `Added Associations` section.
    # And to avoid false match i may use, that value in `Added Associations`
    # is a semicolon separated list (and `gvfs-mime` adds semicolon always,
    # even if there's only one item in the list).
    - name: firefox | Set default for http handler
      lineinfile:
        insertafter: 'Default Applications'
        regexp: '(^#+|^)x-scheme-handler/http=[^;]+$'
        line: "x-scheme-handler/http={{ firefox_default_desktop }}"
        path: "{{ item }}"
      loop: "{{ mimeapps_list_files }}"
    - name: firefox | Set default for https handler
      lineinfile:
        insertafter: 'Default Applications'
        regexp: '(^#+|^)x-scheme-handler/https=[^;]+$'
        line: "x-scheme-handler/https={{ firefox_default_desktop }}"
        path: "{{ item }}"
      loop: "{{ mimeapps_list_files }}"
  tags:
    - 'firefox_set_default'

