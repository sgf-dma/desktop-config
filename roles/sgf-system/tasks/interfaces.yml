---

- block:
    - name: interfaces | Stat interface files
      stat:
        path: "{{ '/sys/class/net/' + item }}"
      loop: "{{ ansible_facts['interfaces'] }}"
      register: interfaces_stats

    # Wireless interfaces may have generated mac address different from real
    # hardware mac. I need to use real hardware macaddress in link files to
    # match.
    - name: interfaces | Stat wireless phy80211 macaddress file
      stat:
        path: "{{ '/sys/class/net/' + item + '/phy80211/macaddress' }}"
      register: macaddress_stats
      loop: "{{ ansible_facts['interfaces'] }}"

    - name: interfaces | Obtain physical macaddresses
      slurp:
        src: "{{ item.stat.path }}"
      register: phy_macaddress_content
      when: item.stat.exists
      loop: "{{ macaddress_stats.results }}"

    # Define interface link configs.
    #
    # Filter out:
    # - interfaces without mac address
    # - virtual interfaces (loopback, bridges, etc), unless they're defined
    # explicitly in 'interface_links'. See
    # https://stackoverflow.com/questions/55880443/how-to-get-a-list-of-physical-network-interfaces-with-ansible .
    - name: interfaces | Define
      set_fact:
        _interface_links: >
          {{  [ { 'name'        : item.0
                , 'file'        : '/etc/systemd/network/50-' + item.0 + '.link'
                , 'disable_wol' : disable_wol
                                  and ( item.0[0:2] == 'en' or item.0[0:3] == 'eth' )
                , 'phy_macaddress' : item.1.content | default('') | b64decode | trim
                      | default(ansible_facts[item.0]['macaddress'], true)
                } | combine(interface_links[item.0] | default({}))
              ] + _interface_links
          }}
      when: ansible_facts[item.0]['macaddress'] is defined
            and (    item.2.stat.lnk_target | regex_search('/virtual/') is none
                  or interface_links[item.0] is defined
                )
      loop: >-
        {{ ansible_facts['interfaces']
            | zip(phy_macaddress_content.results, interfaces_stats.results)
            | list
        }}

    - name: interfaces | Show
      debug:
        var: _interface_links

- block:
    # To disable `mac` naming policy and random mac address for interfaces
    # connected through usb (applyed in
    # `/lib/udev/rules.d/73-usb-net-by-mac.rules`) i may create this symlink
    # (see `TEST` in that file for other ways to avoid). After that link files
    # will apply.
    - name: interfaces | Disable udev rule forcing mac naming policy for usb
      file:
        src:  '/lib/udev/rules.d/80-net-setup-link.rules'
        path: '/etc/udev/rules.d/80-net-setup-link.rules'
        state: link
        force: no
      become: yes
      when: ansible_distribution == "Debian"
            and (   ansible_distribution_major_version | int > 9
                or  ansible_distribution_major_version | int < 11 )

    # Template expects variable `interface` containing interface name.
    - name: interfaces | Generate link files based on default.link
      template:
        src:  'interface.link'
        dest: "{{ item.file }}"
        force: no
        mode:   0644
        owner:  'root'
        group:  'root'
      vars:
        interface: "{{ item }}"
      loop: "{{ _interface_links }}"
      become: yes
      notify:
        - reload systemd

    - name: interfaces | Disable wake on lan
      lineinfile:
        dest: "{{ item.file }}"
        backup: yes
        line: 'WakeOnLan=off'
        regexp: "(^#+|^)WakeOnLan=.*$"
        insertafter: '^\[Link\]$'
        state: present
      when: item.disable_wol
      loop: "{{ _interface_links }}"
      become: yes
      notify:
        - reload systemd

    - name: interfaces | Remove disabled wake on lan for others
      lineinfile:
        dest: "{{ item.file }}"
        backup: yes
        regexp: "(^#+|^)WakeOnLan=.*$"
        state: absent
      when: not item.disable_wol
      loop: "{{ _interface_links }}"
      become: yes
      notify:
        - reload systemd

- block:
    - name: interfaces | Copy NetworkManager configs
      copy:
        src: "{{ item }}"
        dest: '/etc/NetworkManager/conf.d'
      become: yes
      with_fileglob:
        - "files/NetworkManager/*"
      notify: restart NetworkManager
