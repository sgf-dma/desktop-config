---

- block:
    # In fact, on Debian 11 i may find permanent mac address in 'permaddr'
    # key of 'ip addr show' output, but for older version, 'ethtool' seems the
    # only way to find permanent mac addresses of ethernet interfaces.
    - name: interfaces | Install ethtool
      ansible.builtin.package:
        name: 'ethtool'
        state: present
      become: yes
      when: ansible_facts.packages['ethtool'] | length == 0

    - name: interfaces | Gather 'ethtool -P' output for all interfaces
      ansible.builtin.command: "/sbin/ethtool -P {{ item }}"
      register: ethtool_p_stdout
      changed_when: false
      check_mode: false
      loop: "{{ ansible_facts['interfaces'] }}"

    - name:
      ansible.builtin.debug:
        var: ethtool_p_stdout

    # There should be single stdout line, but just in case i join them..
    - name: interfaces | Parse ethtool output into interface name to mac dictionary ..
      ansible.utils.cli_parse:
        text: >-
          {% for s in ethtool_p_stdout.results -%}
            {{ s.item }} {{ s.stdout_lines | join (' ') }}
          {% endfor %}
        #'
        parser:
          name: ansible.netcommon.native
          template_path: "{{ role_path + '/templates/parse_ethtool.yaml' }}"
        set_fact: phy_macs_by_name

    - name: interfaces | .. and also define mac to interface name dictionary
      ansible.builtin.set_fact:
        phy_macs_by_mac: >-
          {{ dict(phy_macs_by_name.values() | zip(phy_macs_by_name.keys())) }}

    - name: interfaces | Show interface name to physical mac dictionary
      ansible.builtin.debug:
        var: phy_macs_by_name

    - name: interfaces | Show physical mac to interfaces name dictionary
      ansible.builtin.debug:
        var: phy_macs_by_mac

# Alternatively, i may determine permanent mac address of wireless interfaces
# from sysfs. But, it seems, this method work only for wireless interfaces..
#
#- block:
#    # Wireless interfaces may have generated mac address different from real
#    # hardware mac. I need to use real hardware macaddress in link files to
#    # match.
#    - name: interfaces | Stat wireless phy80211 macaddress file
#      ansible.builtin.stat:
#        path: "{{ '/sys/class/net/' + item + '/phy80211/macaddress' }}"
#      register: macaddress_stats
#      loop: "{{ ansible_facts['interfaces'] }}"
#
#    - name: interfaces | Obtain physical macaddresses for wireless interfaces
#      ansible.builtin.slurp:
#        src: "{{ item.stat.path }}"
#      register: phy_macaddress_content
#      when: item.stat.exists
#      loop: "{{ macaddress_stats.results }}"

- block:
    # This will be used later for filtering out virtual network interfaces.
    - name: interfaces | Stat interface files
      ansible.builtin.stat:
        path: "{{ '/sys/class/net/' + item }}"
      loop: "{{ ansible_facts['interfaces'] }}"
      register: interfaces_stats

- block:
    - name: interfaces | Find existing link files
      ansible.builtin.find:
        file_type: file
        follow: no
        path: '/etc/systemd/network'
        patterns: ['*.link']
      register: interface_link_files_found

    - name: interfaces | Search for MacAddress in Match section of link files
      ansible.builtin.set_fact:
        interface_link_files: >-
          {{ interface_link_files
                | combine({ item_mac : {'file': item.path} })
          }}
      when: item_macs_found | length == 1
      vars:
        item_mac: >-
          {{ item_macs_found | first if item_macs_found | length == 1 else '' }}
        item_macs_found: >-
          {{ query('ini', 'MACAddress section=Match file=' + item.path) }}
      loop: "{{ interface_link_files_found.files }}"

    - name: interfaces | Show interface link files found
      ansible.builtin.debug:
        var: interface_link_files

- block:
    - name: interfaces | Define user defined interfaces
      ansible.builtin.set_fact:
        _interface_links: >
          {{  { item_mac :
                  { 'name'     : item_name
                  , 'file'     : item_file
                  , 'phy_mac'  : item_mac
                  , 'disable_wol' : item.value.disable_wol | default(false)
                  , 'file_src' : item_file_src
                  , 'file_template' : item_file_template
                  , 'renamed'  : item_renamed
                  , 'macaddresspolicy' : item.value.macaddresspolicy | default('persistent')
                  }
              } | combine(_interface_links)
          }}
      vars:
        item_mac: >-
          {{ item.key }}
        item_name: >-
          {{ item.value.name | default(phy_macs_by_mac[item_mac]) }}
        # Non-existing interfaces are always considered as "renamed".
        item_renamed: >-
          {{ item.value.name is defined
              and ( item.value.name != phy_macs_by_mac[item_mac]
                    if phy_macs_by_mac[item_mac] is defined
                    else true
                  )
          }}
        # Interface link file name. It may be either a file or symlink to
        # another file, but that'll be determined later during creation.
        item_file: >-
          {{ '/etc/systemd/network/50-' + item_name + '.link' }}
        # Source link file for interface. If interface link file with the same
        # mac address in 'Match' section already exists, use it as source link
        # file for current interface. I don't check here whether this already
        # existing file name is _exaclty the same file_ as i want to create
        # for current interface. I'll check this later at creation step. I.e.
        # 'file' represents "desired state", 'file_src' is actual state. These
        # states may match.
        #
        # 'force_overwrite' here makes the 'file_src' to be always empty (if
        # not explicitly defined by user), which effectively forces the use of
        # template for file creation (see below).
        item_file_src: >-
          {{ item.value.file_src | default(
                interface_link_files[item_mac].file
                  if  interface_link_files[item_mac] is defined
                      and not force_overwrite
                  else ''
              )
          }}
        # In general, for any interface:
        # 1. I can't say for sure _which_ link file was used to name and setup
        #    it.
        # 2. I shouldn't create (any) interface files _without_ exact match in
        #    'Match' section, because these files may match with several
        #    interfaces, which will lead to unpredictable results.
        #
        # Thus, if link file was neither found nor explicitly defined by user,
        # i should use "named link" file template as the safest default.
        item_file_template: >-
          {{ item.value.file_template | default(
                role_path + '/templates/named_link.link'
                  if item_file_src == ''
                  else ''
              )
          }}
      loop: >-
        {{ interface_links | dict2items }}
      loop_control:
        label: "{{ item }}"

    # FIXME: I shouldn't install default link file for any interface
    # _without_ hardcoding particular interface mac there. Otherwise, this
    # default link file will match and will be applied to _any_ interface (due
    # to lowered priority comparing to real '99-default.link'). Thus, i should
    # either use named_link template here or hardcode mac address in copy of
    # default link file as was before.
    - name: interfaces | Define existing ethernet interfaces with disabled WOL
      ansible.builtin.set_fact:
        _interface_links: >
          {{  { item_mac :
                  { 'name'    : item_name
                  , 'file'    : item_file
                  , 'phy_mac' : item_mac
                  , 'disable_wol' : true
                  , 'file_src' : item_file_src
                  , 'file_template' : item_file_template
                  , 'macaddresspolicy' : item.macaddresspolicy | default('persistent')
                  }
              } | combine(_interface_links)
          }}
      when: phy_macs_by_name[item_name] is defined
            and ( item.1.stat.lnk_target | regex_search('/virtual/') is none )
            and ( item_name[0:2] == 'en' or item_name[0:3] == 'eth' )
            and not item_defined
      vars:
        item_name: >-
          {{ item.0 }}
        item_mac: >-
          {{ phy_macs_by_name[item_name] | default('') }}
        # Whether this item was already defined from user config. I will
        # define here only interface _not_ defined by user.
        item_defined: >-
          {{ (_interface_links[item_mac] is defined) if item_mac != '' else false }}
        item_file: >-
          {{ '/etc/systemd/network/50-' + item_name + '.link' }}
        item_file_src: >-
          {{ interface_link_files[item_mac].file
              if  interface_link_files[item_mac] is defined
                  and not force_overwrite
              else ''
          }}
        item_file_template: >-
          {{ role_path + '/templates/named_link.link'
              if item_file_src == ''
              else ''
          }}
      loop: >-
        {{ ansible_facts['interfaces']
            | zip(interfaces_stats.results)
            | list
        }}
      loop_control:
        label: "{{ item.0 }}"

    - name: interfaces | Show interface link files
      ansible.builtin.debug:
        var: _interface_links

- block:
    # To disable `mac` naming policy and random mac address for interfaces
    # connected through usb (applyed in
    # `/lib/udev/rules.d/73-usb-net-by-mac.rules`) i may create this symlink
    # (see `TEST` in above rules file for other ways to avoid). After that
    # link files will apply.
    - name: interfaces | Disable udev rule forcing mac naming policy for usb
      ansible.builtin.file:
        src:  '/lib/systemd/network/99-default.link'
        path: '/etc/systemd/network/99-default.link'
        state: link
        force: no
      become: yes
      when: ansible_distribution == "Debian"
            and (   ansible_distribution_major_version | int >= 9
                and ansible_distribution_major_version | int <  11 )
      notify:
        - reload udevadm

- block:
    # FIXME: If link file is symlink and 'force_overwrite' is set, this task
    # will create new file instead of overwriting file pointed by symlink.
    # This is probably wrong..
    - name: interfaces | Create link files from template or..
      ansible.builtin.template:
        src:  "{{ item.file_template }}"
        dest: "{{ item.file }}"
        force: "{{ _force_overwrite }}"
        backup: yes
        mode:  0644
        owner: 'root'
        group: 'root'
      loop: "{{ _interface_links.values() }}"
      when: item.file_template != '' and item.file_src == ''
      notify:
        - reload systemd

    - name: interfaces | .. or copy link files from source or..
      ansible.builtin.copy:
        src:  "{{ item.file_src }}"
        dest: "{{ item.file }}"
        force: "{{ _force_overwrite }}"
        backup: yes
        mode:  0644
        owner: 'root'
        group: 'root'
      loop: "{{ _interface_links.values() }}"
      when: item.file_src != '' and item.file_src != item.file
            and not item.file_src.startswith("/etc/systemd/network/")
      notify:
        - reload systemd

    # FIXME: Install symlinks with next number after real files (e.g. 51-).
    - name: interfaces | .. or create symlinks to existing interface link files
      ansible.builtin.file:
        src:  "{{ item.file_src }}"
        dest: "{{ item.file }}"
        state: link
        force: no
        mode:  0644
        owner: 'root'
        group: 'root'
      loop: "{{ _interface_links.values() }}"
      when: item.file_src != '' and item.file_src != item.file
            and item.file_src.startswith("/etc/systemd/network/")
      notify:
        - reload systemd

          # Usually, it's better to install link files matching to exactly the
          # interface they were intalled for. This is usually true for
          # templates (because they were written that way), but if source file
          # is explicitly configured or already exists this may not be true.
          # And, though, using link files matching more than one interface may
          # lead to unexpected results and break system network, to allow such
          # usage following task is commented out.
          #
          # Though, it should be uncommented, if i'll copy '99-default.link'
          # file for some interfaces as is. Otherwise, default link file with
          # priority lowered to 50 will match _any_ interface.
          #    - name: interfaces | Add MAC address to Match section
          #      community.general.ini_file:
          #        path: "{{ item.file }}"
          #        section: 'Match'
          #        option: 'MACAddress'
          #        value:  "{{ item.phy_macaddress }}"
          #        state: present
          #        no_extra_spaces: yes
          #        create: no
          #        backup: yes
          #      loop: "{{ _interface_links }}"
          #      notify:
          #        - reload systemd

  become: yes

- block:
    - name: interfaces | Disable wake on lan
      ansible.builtin.lineinfile:
        dest: "{{ item.file }}"
        backup: yes
        line: 'WakeOnLan=off'
        regexp: "(^#+|^)WakeOnLan=.*$"
        insertafter: '^\[Link\]$'
        state: present
      when: item.disable_wol
      loop: "{{ _interface_links.values() }}"
      become: yes
      notify:
        - reload systemd

    - name: interfaces | Remove disabled wake on lan for others
      ansible.builtin.lineinfile:
        dest: "{{ item.file }}"
        backup: yes
        regexp: "(^#+|^)WakeOnLan=.*$"
        state: absent
      when: not item.disable_wol
      loop: "{{ _interface_links.values() }}"
      become: yes
      notify:
        - reload systemd

- block:
    - name: interfaces | Copy NetworkManager configs
      ansible.builtin.copy:
        src: "{{ item }}"
        dest: '/etc/NetworkManager/conf.d'
      become: yes
      with_fileglob:
        - "files/NetworkManager/*"
      notify: restart NetworkManager
